/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(just)

public class just
{
  public static void main(String args []) throws ParseException
  {
    just parser = new just(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an Just synatax  :");
      try
      {
        switch (just.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        just.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(just)

SKIP :
{
  " "
|  "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
	 < PROGRAM : "program" >
	| < LGESCHWEIFT : "{" >
	| < RGESCHWEIFT : "}" >
	| < ELKLAMMER : "[">
	| < ERKLAMMER : "]" >
	| < TYPE : "void"|"int"| "boolean" >
	| < SEMI : ";" >
	| < EQUALS : "=" >
}


TOKEN : 
{
	  < NUMBER : (< DIGIT >)+ >
	| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : 
{
	  < WORD : (< LETTER >)+ >
	| < #LETTER : ["a"-"z", "A"-"Z", "_"] >
}

TOKEN:
{   < IDENT : < WORD > (< WORD > | < NUMBER >)* >
}

int one_line() :
{}
{
  firstExpression() ";;"
  {
    return 0;
  }
| ";;"
  {
    return 1;
  }
}

void firstExpression():
{}
{
	< PROGRAM > < IDENT > <LGESCHWEIFT> programmCode() <RGESCHWEIFT>
}  

void programmCode():
{}
{
  	< IDENT >
}

void varDef():{}{
  	< TYPE > < IDENT > < ELKLAMMER > init() < ERKLAMMER > <SEMI > }


void init():
{}
{
  < EQUALS > < NUMBER >}



/*
void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
| "(" sum() ")"
}*/

